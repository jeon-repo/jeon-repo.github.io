[
  
  {
    "title"    : "[Design Pattern] 전략 패턴 (Strategy)",
    "category" : "",
    "tags"     : " 디자인패턴, Algorithm",
    "url"      : "/2021/07/23/Designe-Pattern-Strategy.html",
    "date"     : "July 23, 2021",
    "excerpt"  : "\n\n설명\n\n위키백과에 나온 내용은 다음과 같다.\n\n\n  실행 중에 알고리즘을 선택할 수 있게 하는 행위 소프트웨어 디자인 패턴이다.\n\n  \n    특정한 계열의 알고리즘들을 정의\n    각 알고리즘을 캡슐화\n    알고리즘들을 해당 계열 안에서 상호 교체가 가능하게 만듬\n  \n\n  Strategy는 알고리즘을 사용하는 클라이언트와는 독립적으로 다양하게 만든다. Strategy는 유연하고 재사용 가능한 객체지향 소프트웨어를 어떻게 설계하는지...",
  "content"  : "\n\n설명\n\n위키백과에 나온 내용은 다음과 같다.\n\n\n  실행 중에 알고리즘을 선택할 수 있게 하는 행위 소프트웨어 디자인 패턴이다.\n\n  \n    특정한 계열의 알고리즘들을 정의\n    각 알고리즘을 캡슐화\n    알고리즘들을 해당 계열 안에서 상호 교체가 가능하게 만듬\n  \n\n  Strategy는 알고리즘을 사용하는 클라이언트와는 독립적으로 다양하게 만든다. Strategy는 유연하고 재사용 가능한 객체지향 소프트웨어를 어떻게 설계하는지 기술하기 위해 디자인 패턴의 개념을 보급시킨 디자인 패턴이라는 영향력 있는 책에 포함된 패턴들 가운데 하나이다. (GoF 디자인 패턴에도 포함 )\n\n  “위키백과 - Strategy Pattern”\n\n\n\n  객체지향 프로그래밍 설계를 할 때 자주 발생하는 문제들을 피하기 위해 사용되는 패턴이라고 한다.\n  위키백과의 설명을 보면 알고리즘의 캡슐화를 통해 실행중에 알고리즘을 바꿔가며 사용하는 방식같다.\n  Strategy는 하나의 시스템에서 설정이 각각 다른 여러 모듈을 사용할 때 설정의 공통 부분에 이용하면 좋을 것 같다고 생각이 들었다.\n\n\n예시 코드\n\n클래스 선언시에 parameter가 없으면 클래스 내부 함수 호출, parameter가 있으면 전달받은 함수 호출\n\nclass Strategy():\n    # Python은 함수도 parameter로 전달하고, 전달받을 수 있다.\n    def __init__(self, obj=None):\n        # obj가 있으면 self.getFunction()에 할당\n        if obj:\n            self.getFunction = obj\n\n    def getFunction(self):\n        return &#39;Internal Function&#39;\n\ndef outFunction1():\n    return &#39;External Function 1&#39;\n\ndef outFunction2():\n    return &#39;External Function 2&#39;\n\nif __name__ == &#39;__main__&#39;:\n    strategy0 = Strategy()\n    strategy1 = Strategy(outFunction1)\n    strategy2 = Strategy(outFunction2)\n\n    print(f&#39;strategy0: {strategy0.getFunction()}&#39;)\n    print(f&#39;strategy1: {strategy1.getFunction()}&#39;)\n    print(f&#39;strategy2: {strategy2.getFunction()}&#39;)\n\n\n결과\n\nstrategy0, 1, 2의 결과가 각각 다른 것을 확인할 수 있다.\n\n\n"
} ,
  
  {
    "title"    : "[Design Pattern] 싱글턴 패턴 (Singleton)",
    "category" : "",
    "tags"     : " 디자인패턴, Algorithm",
    "url"      : "/2021/07/21/Designe-Pattern-Singleton.html",
    "date"     : "July 21, 2021",
    "excerpt"  : "\n\n[설명]\n\n먼저 위키백과의 설명을 한 번 보겠다.\n\n\n  클래스의 생성자가 여러 차례 호출되더라도 실제로 생성되는 객체는 하나이고, 최초 생성 이후에 호출된 생성자는 최초의 생성자가 생성한 객체를 리턴하는 방식의 디자인 유형을 Singleton 패턴이라고 한다.\n\n  “위키백과 - Singleton Pattern”\n\n\n\n  위키백과의 설명처럼 특정 객체를 여러곳에서 공유하기 위해서 사용하는 방식같다.\n  Python은 모듈 자체가 Si...",
  "content"  : "\n\n[설명]\n\n먼저 위키백과의 설명을 한 번 보겠다.\n\n\n  클래스의 생성자가 여러 차례 호출되더라도 실제로 생성되는 객체는 하나이고, 최초 생성 이후에 호출된 생성자는 최초의 생성자가 생성한 객체를 리턴하는 방식의 디자인 유형을 Singleton 패턴이라고 한다.\n\n  “위키백과 - Singleton Pattern”\n\n\n\n  위키백과의 설명처럼 특정 객체를 여러곳에서 공유하기 위해서 사용하는 방식같다.\n  Python은 모듈 자체가 Singleton으로 구성되어있다.\n→ 클래스 변수를 생성하면 해당 클래스의 객체가 생성된 어느 곳이던 같은 변수값이 반환된다.\n  Singleton은 다크 모드 같은 시스템 상의 공용 설정에 이용하면 좋을 것 같다고 생각이 들었다.\n\n\n[예시 코드]\n\n클래스 객체 생성시에 instance란 변수가 없으면 변수를 생성, 있으면 그냥 반환\n\n# test_singleton.py\n\nclass Singleton():\n    def __new__(cls):\n        # instance 존재 여부 확인\n        if not hasattr(cls, &#39;instance&#39;):\n            cls.instance = super(Singleton, cls).__new__(cls)\n        return cls.instance\n\nif __name__ == &#39;__main__&#39;:\n    single_1 = Singleton()\n    print(f&#39;1번 세팅 : {single_1}&#39;)\n    single_2 = Singleton()\n    print(f&#39;2번 세팅 : {single_2}&#39;)\n\n\n[실행 결과]\n\n객체를 2번 생성시 최초 생성한 객체(1번)와 동일한 객체를 반환 받은 것을 확인할 수 있다.\n\n\n"
} ,
  
  {
    "title"    : "카카오 코딩 테스트 - 순위 검색",
    "category" : "",
    "tags"     : " 카카오, 코테, Python, Algorithm",
    "url"      : "/2021/07/20/%EC%B9%B4%EC%B9%B4%EC%98%A4-%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%88%9C%EC%9C%84-%EA%B2%80%EC%83%89.html",
    "date"     : "July 20, 2021",
    "excerpt"  : "\n\n2021 KAKAO BLIND RECRUITMENT “메뉴 리뉴얼” 문제를 풀어보겠습니다.\n\n\n  여기를 누르면 설명을 건너뛸 수 있습니다.\n\n\n\n\n[본 문제는 정확성과 효율성 테스트 각각 점수가 있는 문제입니다.]\n\n카카오는 하반기 경력 개발자 공개채용을 진행 중에 있으며 현재 지원서 접수와 코딩테스트가 종료되었습니다. 이번 채용에서 지원자는 지원서 작성 시 아래와 같이 4가지 항목을 반드시 선택하도록 하였습니다.\n\n\n  코딩테스트 ...",
  "content"  : "\n\n2021 KAKAO BLIND RECRUITMENT “메뉴 리뉴얼” 문제를 풀어보겠습니다.\n\n\n  여기를 누르면 설명을 건너뛸 수 있습니다.\n\n\n\n\n[본 문제는 정확성과 효율성 테스트 각각 점수가 있는 문제입니다.]\n\n카카오는 하반기 경력 개발자 공개채용을 진행 중에 있으며 현재 지원서 접수와 코딩테스트가 종료되었습니다. 이번 채용에서 지원자는 지원서 작성 시 아래와 같이 4가지 항목을 반드시 선택하도록 하였습니다.\n\n\n  코딩테스트 참여 개발언어 항목에 cpp, java, python 중 하나를 선택해야 합니다.\n  지원 직군 항목에 backend와 frontend 중 하나를 선택해야 합니다.\n  지원 경력구분 항목에 junior와 senior 중 하나를 선택해야 합니다.\n  선호하는 소울푸드로 chicken과 pizza 중 하나를 선택해야 합니다.\n\n\n인재영입팀에 근무하고 있는 니니즈는 코딩테스트 결과를 분석하여 채용에 참여한 개발팀들에 제공하기 위해 지원자들의 지원 조건을 선택하면 해당 조건에 맞는 지원자가 몇 명인 지 쉽게 알 수 있는 도구를 만들고 있습니다.예를 들어, 개발팀에서 궁금해하는 문의사항은 다음과 같은 형태가 될 수 있습니다.코딩테스트에 java로 참여했으며, backend 직군을 선택했고, junior 경력이면서, 소울푸드로 pizza를 선택한 사람 중 코딩테스트 점수를 50점 이상 받은 지원자는 몇 명인가?\n\n물론 이 외에도 각 개발팀의 상황에 따라 아래와 같이 다양한 형태의 문의가 있을 수 있습니다.\n\n\n  코딩테스트에 python으로 참여했으며, frontend 직군을 선택했고, senior 경력이면서, 소울푸드로 chicken을 선택한 사람 중 코딩테스트 점수를 100점 이상 받은 사람은 모두 몇 명인가?\n  코딩테스트에 cpp로 참여했으며, senior 경력이면서, 소울푸드로 pizza를 선택한 사람 중 코딩테스트 점수를 100점 이상 받은 사람은 모두 몇 명인가?\n  backend 직군을 선택했고, senior 경력이면서 코딩테스트 점수를 200점 이상 받은 사람은 모두 몇 명인가?\n  소울푸드로 chicken을 선택한 사람 중 코딩테스트 점수를 250점 이상 받은 사람은 모두 몇 명인가?\n  코딩테스트 점수를 150점 이상 받은 사람은 모두 몇 명인가?\n\n\n즉, 개발팀에서 궁금해하는 내용은 다음과 같은 형태를 갖습니다.\n\n\n  [조건]을 만족하는 사람 중 코딩테스트 점수를 X점 이상 받은 사람은 모두 몇 명인가?\n\n\n\n\n[문제]\n\n지원자가 지원서에 입력한 4가지의 정보와 획득한 코딩테스트 점수를 하나의 문자열로 구성한 값의 배열 info, 개발팀이 궁금해하는 문의조건이 문자열 형태로 담긴 배열 query가 매개변수로 주어질 때,각 문의조건에 해당하는 사람들의 숫자를 순서대로 배열에 담아 return 하도록 solution 함수를 완성해 주세요.\n\n[제한사항]\n\n\n  info 배열의 크기는 1 이상 50,000 이하입니다.\n  info 배열 각 원소의 값은 지원자가 지원서에 입력한 4가지 값과 코딩테스트 점수를 합친 “개발언어 직군 경력 소울푸드 점수” 형식입니다.\n    \n      개발언어는 cpp, java, python 중 하나입니다.\n      직군은 backend, frontend 중 하나입니다.\n      경력은 junior, senior 중 하나입니다.\n      소울푸드는 chicken, pizza 중 하나입니다.\n      점수는 코딩테스트 점수를 의미하며, 1 이상 100,000 이하인 자연수입니다.\n      각 단어는 공백문자(스페이스 바) 하나로 구분되어 있습니다.\n    \n  \n  query 배열의 크기는 1 이상 100,000 이하입니다.\n  query의 각 문자열은 “[조건] X” 형식입니다.\n    \n      [조건]은 “개발언어 and 직군 and 경력 and 소울푸드” 형식의 문자열입니다.\n      언어는 cpp, java, python, - 중 하나입니다.\n      직군은 backend, frontend, - 중 하나입니다.\n      경력은 junior, senior, - 중 하나입니다.\n      소울푸드는 chicken, pizza, - 중 하나입니다.\n      ’-‘ 표시는 해당 조건을 고려하지 않겠다는 의미입니다.\n      X는 코딩테스트 점수를 의미하며 조건을 만족하는 사람 중 X점 이상 받은 사람은 모두 몇 명인 지를 의미합니다.\n      각 단어는 공백문자(스페이스 바) 하나로 구분되어 있습니다.\n      예를 들면, “cpp and - and senior and pizza 500”은 “cpp로 코딩테스트를 봤으며, 경력은 senior 이면서 소울푸드로 pizza를 선택한 지원자 중 코딩테스트 점수를 500점 이상 받은 사람은 모두 몇 명인가?”를 의미합니다.\n    \n  \n\n\n[입출력 예]\n\n\n  \n    \n      info\n      query\n      result\n    \n  \n  \n    \n      [“java backend junior pizza 150”,”python frontend senior chicken 210”,”python frontend senior chicken 150”,”cpp backend senior pizza 260”,”java backend junior chicken 80”,”python backend senior chicken 50”]\n      [“java and backend and junior and pizza 100”,”python and frontend and senior and chicken 200”,”cpp and - and senior and pizza 250”,”- and backend and senior and - 150”,”- and - and - and chicken 100”,”- and - and - and - 150”]\n      [1,1,1,1,2,4]\n    \n  \n\n\n입출력 예에 대한 설명\n지원자 정보를 표로 나타내면 다음과 같습니다.\n\n\n  \n    \n      언어\n      직군\n      경력\n      소울푸드\n      점수\n    \n  \n  \n    \n      java\n      backend\n      junior\n      pizza\n      150\n    \n    \n      python\n      frontend\n      senior\n      chicken\n      210\n    \n    \n      python\n      frontend\n      senior\n      chicken\n      150\n    \n    \n      cpp\n      backend\n      senior\n      pizza\n      260\n    \n    \n      java\n      backend\n      junior\n      chicken\n      80\n    \n    \n      python\n      backend\n      senior\n      chicken\n      50\n    \n  \n\n\n\n  &quot;java and backend and junior and pizza 100&quot; : java로 코딩테스트를 봤으며, backend 직군을 선택했고 junior 경력이면서 소울푸드로 pizza를 선택한 지원자 중 코딩테스트 점수를 100점 이상 받은 지원자는 1명 입니다.\n  &quot;python and frontend and senior and chicken 200&quot; : python으로 코딩테스트를 봤으며, frontend 직군을 선택했고, senior 경력이면서 소울 푸드로 chicken을 선택한 지원자 중 코딩테스트 점수를 200점 이상 받은 지원자는 1명 입니다.\n  &quot;cpp and - and senior and pizza 250&quot; : cpp로 코딩테스트를 봤으며, senior 경력이면서 소울푸드로 pizza를 선택한 지원자 중 코딩테스트 점수를 250점 이상 받은 지원자는 1명 입니다.\n  &quot;- and backend and senior and - 150&quot; : backend 직군을 선택했고, senior 경력인 지원자 중 코딩테스트 점수를 150점 이상 받은 지원자는 1명 입니다.\n  &quot;- and - and - and chicken 100&quot; : 소울푸드로 chicken을 선택한 지원자 중 코딩테스트 점수를 100점 이상을 받은 지원자는 2명 입니다.\n  &quot;- and - and - and - 150&quot; : 코딩테스트 점수를 150점 이상 받은 지원자는 4명 입니다.\n\n\n\n\nSolution\n\n[문제 이해]\n\n\n  이번 문제는 처음에 정확도를 맞추는 것은 크게 어렵지 않았는데, 효율성 부분에서 꽤 많은 시간이 걸리다가, 효율성 부분은 결국 검색을 통해 해결하였다.\n  최초 시도에는 단순히 리스트 컴프리헨션을 사용하며, 반복문을 최소화 하는 방식으로 진행했다.\n→ 정확도는 맞았지만 효율성에서 실패하기 시작\n  \n    아래는 시도했던 방법이다.\n\n    \n      \n        리스트 컴프리헨션 → 효율성 실패\n        list보다 빠르 처리를 위해 dictionary 사용 → 효율성 실패\n        셀프 lower bound 사용 → 효율성 실패\n        구체적인 문제 풀이 검색 : https://pacientes.github.io/posts/2021/02/algorithm_programmers_72412/\n→ 처리할 데이터의 형태가 간단하다면 구조를 미리 만들어두고 최소한의 비교를 통해 결론을 도출 → 효율성 성공\n      \n    \n  \n\n\n이해한 내용을 바탕으로 코드 작성을 해보았다.\n\n[코드]\n\n# Lower bound를 사용하기 위한 라이브러리\nfrom bisect import bisect_left\n\ndef solution(info, query):\n    answer = []\n    \n    language = [&#39;cpp&#39;, &#39;java&#39;, &#39;python&#39;, &#39;-&#39;]\n    position = [&#39;backend&#39;, &#39;frontend&#39;, &#39;-&#39;]\n    career = [&#39;junior&#39;, &#39;senior&#39;, &#39;-&#39;]\n    soulfood = [&#39;chicken&#39;, &#39;pizza&#39;, &#39;-&#39;]\n\n    # 데이터 처리 효율을 위해 미리 만들어둘 구조\n    tables = {}\n    for lang in language:\n        for posi in position:\n            for ca in career:\n                for fo in soulfood:\n                    tables[lang + posi + ca + fo] = []\n\n    # 입력된 info 데이터 전처리\n    for i in info:\n        i = i.split()\n        language = [i[0], &#39;-&#39;]\n        position = [i[1], &#39;-&#39;]\n        career = [i[2], &#39;-&#39;]\n        soulfood = [i[3], &#39;-&#39;]\n\n        for lang in language:\n            for posi in position:\n                for ca in career:\n                    for fo in soulfood:\n                        tables[lang + posi + ca + fo].append(int(i[4]))\n\n    # 데이터 정렬 -&amp;gt; Lower bound를 사용하기 위함\n    for k in tables:\n        tables[k].sort()\n\n    # 입력된 query 데이터 전처리\n    for q in query:\n        q, score = q.replace(&#39; and &#39;, &#39;&#39;).split()\n        score = int(score)\n        \n        left = 0\n        right = len(tables[q])\n\n        # Lower bound를 사용하여 불필요한 데이터 처리를 최소화\n        while left &amp;lt; right:\n            mid = (left + right) // 2\n            if tables[q][mid] &amp;gt;= score: right = mid\n            else: left = mid + 1\n        # 전처리된 info의 list 데이터의 갯수에서 불필요한 데이터를 뺀다.\n        answer.append(len(tables[q]) - left)\n\n    return answer\n\n\n[여담]\n\n문제풀이가 끝난뒤에 다른 사람들의 풀이를 보았는데 역시 대단한 사람들을 또 한번 볼 수 있었다.\n그리고 내가 푼 방식이(검색해서 풀었지만) 문제의 의도에 많이 근접했다고 느껴졌다.\n\n아래는 가장 놀라웠던 숏코딩 을 작성한 코드이다.\n이 분은 친철하게 풀이 과정까지 깃헙에 올려주셔서 링크를 첨부한다.\nReference - https://github.com/yuneg11/Programmers-Solutions/tree/master/solutions/72412 - 순위 검색\n\nfrom functools import reduce\nfrom collections import defaultdict\nfrom bisect import insort, bisect_left\n\ndef solution(info, query):\n    table = {&quot;c&quot;: 3, &quot;j&quot;: 5, &quot;p&quot;: 6, &quot;b&quot;: 6, &quot;f&quot;: 5, &quot;s&quot;: 6, &quot;-&quot;: 0}\n    conv = lambda l, t: (reduce(lambda a, k: (a &amp;lt;&amp;lt; 3) + t(table[k[0]]), l[:-1], 0), int(l[-1]))\n    info = list(map(lambda s: conv(s.split(&quot; &quot;), lambda x: 7 - x), info))\n    query = list(map(lambda s: conv([c for c in s.split(&quot; &quot;) if c != &quot;and&quot;], lambda x: x), query))\n    d = defaultdict(list)\n    for k, v in info:\n        insort(d[k], v)\n    return [sum([len(l) - bisect_left(l, v) for k, l in d.items() if not k &amp;amp; q]) for q, v in query]\n\n"
} ,
  
  {
    "title"    : "함수형 프로그래밍(Functional Programming)",
    "category" : "",
    "tags"     : " FP, 기본기",
    "url"      : "/2021/07/17/%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-Functional-Programming.html",
    "date"     : "July 17, 2021",
    "excerpt"  : "\n\n함수형 프로그래밍이란 순수 함수(Pure Function)를 통해 부작용(Side-Effect)을 피하여 프로그래밍하는 패러다임이다.\n\n이전에 포스팅한 객체지향 프로그래밍과 약간 대조되는 패러다임이라고 생각이 들었다.\n그 주관적인 이유는 아래와 같다.\n\n  \n    객체 단위의 효율적인 처리와 다르게 함수 단위의 독립적인 처리 방식을 고집한다.\n    복잡한 구조로 구성되는 객체지향 프로그래밍과 달리 아주x2 간결한 구조로 구성된다.\n...",
  "content"  : "\n\n함수형 프로그래밍이란 순수 함수(Pure Function)를 통해 부작용(Side-Effect)을 피하여 프로그래밍하는 패러다임이다.\n\n이전에 포스팅한 객체지향 프로그래밍과 약간 대조되는 패러다임이라고 생각이 들었다.\n그 주관적인 이유는 아래와 같다.\n\n  \n    객체 단위의 효율적인 처리와 다르게 함수 단위의 독립적인 처리 방식을 고집한다.\n    복잡한 구조로 구성되는 객체지향 프로그래밍과 달리 아주x2 간결한 구조로 구성된다.\n  \n\n\n함수형 프로그래밍에는 몇 가지의 특징적인 함수의 형태와 개념이 존재한다.\n\n\n  특징적인 함수    \n      1. 순수 함수 (Pure Function)\n      2. 익명 함수 (Anonymous Function)\n      3. 고계 함수 (Higher-Order Function)\n    \n  \n  개념    \n      1. 커링\n      2. 스코프\n      3. Call By Name\n      4. 모나드\n    \n  \n\n\n특징적인 함수\n\n1. 순수 함수 (Pure Function)\n\n순수 함수는 함수형 프로그래밍을 하기 위해서 반드시 사용해야하는 함수 형태이며, 아래와 같은 특징이 있다.\n\n\n  동일한 입력 값을 넣었을 때는 항상 동일한 값을 반환해야 한다.\n  어디서 호출되는지와 상관없이 항상 동일한 값을 반환해야 한다.\n  입력 값을 제외하고 외부의 영향을 받지도, 주지도 않아야 한다.\n\n\n2. 익명 함수 (Anonymous Function)\n\n익명 함수는 생성 즉시 실행되기 때문에 초기화 같은 작업에 효과적으로 사용되는 함수 형태이며, 아래와 같은 특징이 있다.\n\n\n  일회성 함수이다.\n  \n    선언 이전에 사용될 수 없다.\n\n    \n      📌 Javascript의 경우에는 호이스팅으로 인해서 선언 이전에도 함수를 사용할 수 있지만, 익명 함수의 경우에는 호이스팅이 적용되지 않아서 선언 이후에 사용해야 한다.\n    \n  \n  람다(Lambda)식을 통해 익명 함수를 수행할 수 있다.\n\n\n3. 고계 함수 (Higher-Order Function)\n\n고계 함수 는 함수 자체도 값(value) 으로 취급하여 사용하는 함수 형태이며, 아래와 같은 특징이 있다.\n\n\n  함수를 다른 함수의 입력 값으로 전달할 수 있다.\n  함수의 반환 값 역시 함수로 반환할 수 있다.\n\n\n\n\n개념\n\n1. 커링\n\n2. 스코프\n\n3. Call By Name\n\n4. 모나드\n\n자바스크립트 커링 방법\n\n스코프, call by name, 모나드\n"
} ,
  
  {
    "title"    : "객체지향 프로그래밍(Object Oriented Programming)",
    "category" : "",
    "tags"     : " OOP, 기본기",
    "url"      : "/2021/07/16/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-Object-Oriented-Programming.html",
    "date"     : "July 16, 2021",
    "excerpt"  : "\n\n객체지향 프로그래밍(OOP)이란 프로그래밍 패러다임의 하나이다.\n\n객체지향의 객체(Object) 란 데이터(정보, 속성 등)와 데이터를 처리하는 기능(함수)이 클래스로 캡슐화 된 컴퓨터 자원의 묶음(모듈)을 객체 라고 한다.\n\n결국 객체지향 프로그래밍이란 현실의 문제를 여러 개의 객체 단위로 구분하여 처리하는 방식을 말한다고 할 수 있다.\n\n객체지향 프로그래밍하면 주로 나오는 키워드가 있다.\n\n\n  1. 캡슐화 (Encapsulatio...",
  "content"  : "\n\n객체지향 프로그래밍(OOP)이란 프로그래밍 패러다임의 하나이다.\n\n객체지향의 객체(Object) 란 데이터(정보, 속성 등)와 데이터를 처리하는 기능(함수)이 클래스로 캡슐화 된 컴퓨터 자원의 묶음(모듈)을 객체 라고 한다.\n\n결국 객체지향 프로그래밍이란 현실의 문제를 여러 개의 객체 단위로 구분하여 처리하는 방식을 말한다고 할 수 있다.\n\n객체지향 프로그래밍하면 주로 나오는 키워드가 있다.\n\n\n  1. 캡슐화 (Encapsulation)\n  2. 상속성 (Inheritance)\n  3. 추상화 (Abstraction)\n  4. 다형성 (Polymorphism)\n\n\n1. 캡슐화 (Encapsulation)\n\n캡슐화는 데이터와 데이터를 처리하는 함수를 하나로 묶는 것을 의미하며, 아래와 같은 특징이 있다.\n\n\n  캡슐화된 객체 내부는 은닉되어 외부로부터 독립적이다.\n  독립적인 객체는 외부 모듈에 의한 영향이 적다.\n  독립적이기 때문에 객체 간의 결합도가 낮다.\n  캡슐화된 객체는 재사용이 용이하다.\n\n\n2. 상속성 (Inheritance)\n\n상속성은 이미 정의된 상위 개념의 특징을 하위 개념이 물려받는 것을 의미하며, 아래와 같은 특징이 있다.\n\n\n  상속을 통해 상위 개념의 특징을 공유하기 때문에 재사용이 용이하다.\n  이미 정의된 개념을 하위 개념에서 상속받기 때문에 중복되는 코드 작성을 방지한다.\n  상속받은 특징 외에 새로운 특징을 추가하여 사용할 수 있다.\n\n\n3. 추상화 (Abstraction)\n\n추상화는 객체의 공통 특징이나 기능을 묶어서 통상적으로 표현하는 것을 의미하며, 아래와 같은 특징이 있다.\n\n\n  코드의 중복 작성을 방지하고, 가독성을 높여준다.\n  추상화를 통하면 재사용이 용이하다.\n\n\n4. 다형성 (Polymorphism)\n\n다형성은 하나의 시그널을 각 객체가 가지고 있는 고유 특성으로 처리 가능하게 구성하는 것을 의미하며, 아래와 같은 특징이 있다.\n\n\n  시그널의 형태가 달라지면 처리되는 방식도 달라진다.\n  오버로딩, 오버라이딩 같은 기법을 사용하여 효율적인 작업이 가능하다.\n    \n      📌 Python에서는 오버로딩 기능이 지원되지 않는다.\n    \n  \n\n"
} ,
  
  {
    "title"    : "컴프리헨션(Comprehention)",
    "category" : "",
    "tags"     : " Python, 자료구조, 기본기",
    "url"      : "/2021/07/15/%EC%BB%B4%ED%94%84%EB%A6%AC%ED%97%A8%EC%85%98-Comprehention.html",
    "date"     : "July 15, 2021",
    "excerpt"  : "\n\n컴프리헨션이란?\n\n\n  Python에서 컴프리헨션(Comprehension)이란 list, dictionary, set의 자료구조를 보다 쉽게 저장, 검색을 할 수 있게 하는 문법이다.\n  컴프리헨션은 list, dictionary, set의 내부에 코드를 작성하는 특징이 있다.\n\n\n\n  ⚠️ 컴프리헨션은 입력 시퀀스에 있는 값 별로 객체를 담은 자료구조를 통째로 생성하기 때문에 메모리가 많이 소모될 수 있다.\n→ 하지만 이런 문제를 ...",
  "content"  : "\n\n컴프리헨션이란?\n\n\n  Python에서 컴프리헨션(Comprehension)이란 list, dictionary, set의 자료구조를 보다 쉽게 저장, 검색을 할 수 있게 하는 문법이다.\n  컴프리헨션은 list, dictionary, set의 내부에 코드를 작성하는 특징이 있다.\n\n\n\n  ⚠️ 컴프리헨션은 입력 시퀀스에 있는 값 별로 객체를 담은 자료구조를 통째로 생성하기 때문에 메모리가 많이 소모될 수 있다.\n→ 하지만 이런 문제를 해결하기 위해서 Python에서는 제너레이터 표현식을 사용한다.\n\n\n\n\n컴프리헨션 표현식 형태\n\nList       : [표현식 for 객체 in 순회가능객체] + 조건, 다중 반복문\nDictionary : {키_표현식 : 값_표현식 for 객체 in 순회가능객체} + 조건, 다중 반복문\nSet        : {표현식 for 객체 in 순회가능객체} + 조건, 다중 반복문\n\n\n\n  \n    리스트 컴프리헨션 (List Comprehension)\n\n      var_list = []\n\t\n  for i in range(5):\n      var_list.append(i+1)\n\t\n  print(var_list)\n  ---------------------------------------------------\n  [1, 2, 3, 4, 5]\n    \n\n    위의 코드는 반복문을 통해 1 ~ 5의 숫자를 갖는 list를 생성하는 코드이다.\n  아래는 위의 코드와 동일하게 list를 생성하는 컴프리헨션이다.\n\n      var_list = [i+1 for i in range(5)]\n\t\n  print(var_list)\n  ---------------------------------------------------\n  [1, 2, 3, 4, 5]\n    \n  \n  \n    딕셔너리 컴프리헨션 (Dictionary Comprehention)\n\n      students = [&#39;짱구&#39;, &#39;철수&#39;, &#39;유리&#39;, &#39;훈이&#39;, &#39;맹구&#39;]\n  var_dict = {}\n\t\n  for name in students:\n      var_dict[name] = &#39;human&#39;\n\t\n  print(var_dict)\n  ---------------------------------------------------\n  {&#39;짱구&#39;: &#39;human&#39;, &#39;철수&#39;: &#39;human&#39;, &#39;유리&#39;: &#39;human&#39;, &#39;훈이&#39;: &#39;human&#39;, &#39;맹구&#39;: &#39;human&#39;}\n    \n\n    위의 코드는 students의 학생들을 key 로 ‘human’을 value 를 할당하는 dictionary를 생성하는 코드이다.\n  아래는 위의 코드와 동일하게 dictionary를 생성하는 컴프리헨션이다.\n\n      students = [&#39;짱구&#39;, &#39;철수&#39;, &#39;유리&#39;, &#39;훈이&#39;, &#39;맹구&#39;]\n  var_dict = {name: &#39;human&#39; for name in students}\n\t\n  print(var_dict)\n  ---------------------------------------------------\n  {&#39;짱구&#39;: &#39;human&#39;, &#39;철수&#39;: &#39;human&#39;, &#39;유리&#39;: &#39;human&#39;, &#39;훈이&#39;: &#39;human&#39;, &#39;맹구&#39;: &#39;human&#39;}\n    \n  \n  \n    셋 컴프리헨션 (Set Comprehention)\n\n      var_set = set()\n\t\n  for i in range(5):\n      var_set.add(i+1)\n\t\n  print(var_set)\n  ---------------------------------------------------\n  {3, 2, 1, 5, 4}\n    \n\n    위의 코드는 반복문을 통해 1 ~ 5의 숫자를 갖는 set(집합)을 생성하는 코드이다.\n  set(집합)은 괄호의 형태가 dictionary와 동일하기 때문에 {} 를 사용하지 않고 set() 을 사용하여 선언한다.\n  아래는 위의 코드와 동일하게 set(집합)을 생성하는 컴프리헨션이다.\n\n      var_set = {i+1 for i in range(5)}\n\t\n  print(var_set)\n  ---------------------------------------------------\n  # set은 데이터의 순서를 구분하지 않아서 출력시 순서가 일정하지 않다.\n  {2, 5, 3, 1, 4}\n    \n  \n\n"
} ,
  
  {
    "title"    : "카카오 코딩 테스트 - 메뉴 리뉴얼",
    "category" : "",
    "tags"     : " 카카오, 코테, Python, Algorithm",
    "url"      : "/2021/07/14/%EC%B9%B4%EC%B9%B4%EC%98%A4-%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%A9%94%EB%89%B4-%EB%A6%AC%EB%89%B4%EC%96%BC.html",
    "date"     : "July 14, 2021",
    "excerpt"  : "\n\n2021 KAKAO BLIND RECRUITMENT “메뉴 리뉴얼” 문제를 풀어보겠습니다.\n\n\n  여기를 누르면 설명을 건너뛸 수 있습니다.\n\n\n\n\n[문제 설명]\n\n레스토랑을 운영하던 스카피는 코로나19로 인한 불경기를 극복하고자 메뉴를 새로 구성하려고 고민하고 있습니다.\n기존에는 단품으로만 제공하던 메뉴를 조합해서 코스요리 형태로 재구성해서 새로운 메뉴를 제공하기로 결정했습니다. 어떤 단품메뉴들을 조합해서 코스요리 메뉴로 구성하면 좋...",
  "content"  : "\n\n2021 KAKAO BLIND RECRUITMENT “메뉴 리뉴얼” 문제를 풀어보겠습니다.\n\n\n  여기를 누르면 설명을 건너뛸 수 있습니다.\n\n\n\n\n[문제 설명]\n\n레스토랑을 운영하던 스카피는 코로나19로 인한 불경기를 극복하고자 메뉴를 새로 구성하려고 고민하고 있습니다.\n기존에는 단품으로만 제공하던 메뉴를 조합해서 코스요리 형태로 재구성해서 새로운 메뉴를 제공하기로 결정했습니다. 어떤 단품메뉴들을 조합해서 코스요리 메뉴로 구성하면 좋을 지 고민하던 “스카피”는 이전에 각 손님들이 주문할 때 가장 많이 함께 주문한 단품메뉴들을 코스요리 메뉴로 구성하기로 했습니다.\n단, 코스요리 메뉴는 최소 2가지 이상의 단품메뉴로 구성하려고 합니다. 또한, 최소 2명 이상의 손님으로부터 주문된 단품메뉴 조합에 대해서만 코스요리 메뉴 후보에 포함하기로 했습니다.\n\n예를 들어, 손님 6명이 주문한 단품메뉴들의 조합이 다음과 같다면,\n(각 손님은 단품메뉴를 2개 이상 주문해야 하며, 각 단품메뉴는 A ~ Z의 알파벳 대문자로 표기합니다.)\n\n\n  \n    \n      손님 번호\n      주문한 단품메뉴 조합\n    \n  \n  \n    \n      1번 손님\n      A, B, C, F, G\n    \n    \n      2번 손님\n      A, C\n    \n    \n      3번 손님\n      C, D, E\n    \n    \n      4번 손님\n      A, C, D, E\n    \n    \n      5번 손님\n      B, C, F, G\n    \n    \n      6번 손님\n      A, C, D, E, H\n    \n  \n\n\n가장 많이 함께 주문된 단품메뉴 조합에 따라 스카피가 만들게 될 코스요리 메뉴 구성 후보는 다음과 같습니다.\n\n\n  \n    \n      코스 종류\n      메뉴 구성\n      설명\n    \n  \n  \n    \n      요리 2개 코스\n      A, C\n      1번, 2번, 4번, 6번 손님으로부터 총 4번 주문됐습니다.\n    \n    \n      요리 3개 코스\n      C, D, E\n      3번, 4번, 6번 손님으로부터 총 3번 주문됐습니다.\n    \n    \n      요리 4개 코스\n      B, C, F, G\n      1번, 5번 손님으로부터 총 2번 주문됐습니다.\n    \n    \n      요리 4개 코스\n      A, C, D, E\n      4번, 6번 손님으로부터 총 2번 주문됐습니다.\n    \n  \n\n\n[문제]\n\n각 손님들이 주문한 단품메뉴들이 문자열 형식으로 담긴 배열 orders, “스카피”가 추가하고 싶어하는 코스요리를 구성하는 단품메뉴들의 갯수가 담긴 배열 course가 매개변수로 주어질 때, “스카피”가 새로 추가하게 될 코스요리의 메뉴 구성을 문자열 형태로 배열에 담아 return 하도록 solution 함수를 완성해 주세요.\n\n[제한사항]\n\n\n  orders 배열의 크기는 2 이상 20 이하입니다.\n  orders 배열의 각 원소는 크기가 2 이상 10 이하인 문자열입니다.\n    \n      각 문자열은 알파벳 대문자로만 이루어져 있습니다.\n      각 문자열에는 같은 알파벳이 중복해서 들어있지 않습니다.\n    \n  \n  course 배열의 크기는 1 이상 10 이하입니다.\n    \n      course 배열의 각 원소는 2 이상 10 이하인 자연수가 오름차순으로 정렬되어 있습니다.\n      course 배열에는 같은 값이 중복해서 들어있지 않습니다.\n    \n  \n  정답은 각 코스요리 메뉴의 구성을 문자열 형식으로 배열에 담아 사전 순으로 오름차순 정렬해서 return 해주세요.\n    \n      배열의 각 원소에 저장된 문자열 또한 알파벳 오름차순으로 정렬되어야 합니다.\n      만약 가장 많이 함께 주문된 메뉴 구성이 여러 개라면, 모두 배열에 담아 return 하면 됩니다.\n      orders와 course 매개변수는 return 하는 배열의 길이가 1 이상이 되도록 주어집니다.\n    \n  \n\n\n[입출력 예]\n\n\n  \n    \n      orders\n      course\n      result\n    \n  \n  \n    \n      [“ABCFG”, “AC”, “CDE”, “ACDE”, “BCFG”, “ACDEH”]\n      [2,3,4]\n      [“AC”, “ACDE”, “BCFG”, “CDE”]\n    \n    \n      [“ABCDE”, “AB”, “CD”, “ADE”, “XYZ”, “XYZ”, “ACD”]\n      [2,3,5]\n      [“ACD”, “AD”, “ADE”, “CD”, “XYZ”]\n    \n    \n      [“XYZ”, “XWY”, “WXA”]\n      [2,3,4]\n      [“WX”, “XY”]\n    \n  \n\n\n\n\nSolution\n\n[문제 이해]\n\n내가 이해한 내용은 다음과 같았다.\n\n  \n    조합을 사용해야 할 것\n    결과는 가장 큰 데이터 리스트\n  \n\n\n이해한 내용을 바탕으로 코드 작성을 해보았다.\n\n[코드]\n\n# 조합 생성을 위한 라이브러리\nfrom itertools import combinations\n# 문제의 제한사항 해결을 위한 라이브러리\nimport numpy as np\n\ndef solution(orders, course):\n    answer = []\n    # 요리 n개 코스\n    for num in course:\n        menu_count = {}\n        # 주문 목록의 요리로 중복되지 않는 조합을 구성\n        for order in orders:\n            for menu in combinations(order, num):\n                menu = &#39;&#39;.join(sorted(menu))\n                # 주문 횟수 카운트\n                if menu not in menu_count.keys():\n                    menu_count[menu] = 1\n                else:\n                    menu_count[menu] += 1\n\n\t# 요리 주문 횟수 배열 생성\n        arr = np.array(list(menu_count.values()))\n        # max값이 여러개인 경우 &amp;amp; 제한사항 조건 처리\n        best_menu = np.where((arr == arr.max()) &amp;amp; (arr &amp;gt;= 2))[0]\n        if len(best_menu) == 0:\n            break\n        # 주문 횟수가 가장 많은 코스 요리 확인\n        for i in best_menu:\n            answer.append(list(menu_count.keys())[i])\n\n    return sorted(answer)\n\n\n[여담]\n\nitertools의 combinations()함수로 코스 요리 조합을 만들 때와  numpy의 where()함수를 통해 여러개의 max값을 구할 때,\n라이브러리 없이 반복문 사용해 해결을 할까 생각했지만 강력한 라이브러리를 두고 사용하지 않는 것은 바보같다는 생각이 들어서 라이브러리를 최대로 활용해보았다.\n\n하지만 문제를 모두 풀고 난 뒤에 주문 횟수 카운트부분과 여러개의 max값을 구하는 부분을 collections의 Counter().most_common() 함수를 통해 한 번에 해결될 수 있다는 내용을 알게되었다.\n\n역시 인터넷은 넓고, 방법은 많다는 사실을 다시 한 번 느끼게 되었다.\n\n[collections 라이브러리와 리스트 컴프리헨션을 활용한 코드]\n\nfrom itertools import combinations\nfrom collections import Counter\n\ndef solution(orders, course):\n    answer = []\n    # 요리 n개 코스\n    for num in course:\n        order_combinations = []\n        # 중복되지 않는 요리 조합을 구성\n        for order in orders:\n            order_combinations += combinations(sorted(order), num)\n\n\t# 주문 횟수 카운트와 여러 max를 구하는 부분\n        best_menu = Counter(order_combinations).most_common()\n        answer += [ menu for menu, count in best_menu if count &amp;gt; 1 and count == best_menu[0][1] ]\n        \n    # 문자열 형태로 출력하기 위한 처리\n    return [ &#39;&#39;.join(menu) for menu in sorted(answer) ]\n\n"
} ,
  
  {
    "title"    : "큐(Queue)",
    "category" : "",
    "tags"     : " 자료구조, 알고리즘, 기본기",
    "url"      : "/2021/07/13/%ED%81%90-Queue.html",
    "date"     : "July 13, 2021",
    "excerpt"  : "\n\n큐(Queue)란?\n\n컴퓨터의 기본적인 자료구조의 한 가지로, FIFO(First In First Out)구조로 데이터를 저장하는 형식이다.\n\n\n  스택(Stack)의 LIFO(Last In First Out)와 반대되는 개념\n\n\n[발단]\n\n혼자 작은 규모로 자동투자 프로그램을 개발하던 도중\n\n\n  실시간 데이터 감시\n  타겟 데이터 포착시 매매 요청\n\n\n2가지의 기능을 비동기로 구현해야하는 상황이 생겨서 [그림1]의 signal 부분...",
  "content"  : "\n\n큐(Queue)란?\n\n컴퓨터의 기본적인 자료구조의 한 가지로, FIFO(First In First Out)구조로 데이터를 저장하는 형식이다.\n\n\n  스택(Stack)의 LIFO(Last In First Out)와 반대되는 개념\n\n\n[발단]\n\n혼자 작은 규모로 자동투자 프로그램을 개발하던 도중\n\n\n  실시간 데이터 감시\n  타겟 데이터 포착시 매매 요청\n\n\n2가지의 기능을 비동기로 구현해야하는 상황이 생겨서 [그림1]의 signal 부분을 Queue를 통해 구현하였다.\n\n[그림1]\n\n\n[예시 코드]\n\nPython에서 Queue를 사용하는 간단한 예제이다.\n\n예제는 3개의 파일로 구성되어 있다.\n\n# test_signal.py\n\nfrom multiprocessing import Process, Queue\nfrom test_agent import Agent\nfrom test_trader import Buy, Sell\n\ndef run():\n    queue = Queue()\n    agent = Agent(queue)\n    scouter_price = Process(target=agent.scouter_price)\n    scouter_price.start()\n\n    while True:\n        if not queue.empty():\n            data = queue.get()\n            # scouter_price에서 얻은 데이터 활용\n            if data[0] == &#39;buy&#39;:\n                Buy(data[1])\n            if data[0] == &#39;sell&#39;:\n                Sell(data[1])\n            if data[0] == -1:\n                print(&#39;종료&#39;)\n                break\n\nif __name__ == &#39;__main__&#39;:\n    run()\n\n\n# test_agent.py\n\nfrom time import sleep\n\nclass Agent():\n    def __init__(self, queue):\n        self.queue = queue\n        \n    def scouter_price(self):\n        count = 0\n        while True:\n            # 감시 메커니즘 ...\n            count += 1\n            sleep(1)\n            print(f&#39;count: {count}&#39;)\n            if count == 3:\n                self.queue.put([&#39;buy&#39;, count])\n            if count == 6:\n                self.queue.put([&#39;sell&#39;, count])\n            if count == 7:\n                self.queue.put([-1])\n                break\n            else:\n                pass\n\n\n# test_trader.py\n\ndef Buy(data):\n\t# 매수 메커니즘 ...\n\tprint(f&#39;{data}로 매수 완료&#39;)\n\ndef Sell(data):\n\t# 매도 메커니즘 ...\n\tprint(f&#39;{data}로 매도 완료&#39;)\n\n\n[실행 결과]\n\n실행 카운트 3일 때 3으로 매수 완료, 6일 때 6으로 매도 완료, 7일 때 종료가 출력되고 모든 프로세스가 종료된다.\n\n\n"
} ,
  
  {
    "title"    : "카카오 코딩 테스트 - 신규 아이디 추천",
    "category" : "",
    "tags"     : " 카카오, 코테, Python, Algorithm",
    "url"      : "/2021/07/10/%EC%B9%B4%EC%B9%B4%EC%98%A4-%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%8B%A0%EA%B7%9C-%EC%95%84%EC%9D%B4%EB%94%94-%EB%AC%B8%EC%A0%9C.html",
    "date"     : "July 10, 2021",
    "excerpt"  : "\n\n2021 KAKAO BLIND RECRUITMENT “신규 아이디 추천” 문제를 풀어보겠습니다.\n\n\n  여기를 누르면 설명을 건너뛸 수 있습니다.\n\n\n\n\n[문제 설명]\n\n카카오에 입사한 신입 개발자 네오는 &quot;카카오계정개발팀&quot;에 배치되어, 카카오 서비스에 가입하는 유저들의 아이디를 생성하는 업무를 담당하게 되었습니다. “네오”에게 주어진 첫 업무는 새로 가입하는 유저들이 카카오 아이디 규칙에 맞지 않는 아이디를 입력했을 때, 입력된 아이...",
  "content"  : "\n\n2021 KAKAO BLIND RECRUITMENT “신규 아이디 추천” 문제를 풀어보겠습니다.\n\n\n  여기를 누르면 설명을 건너뛸 수 있습니다.\n\n\n\n\n[문제 설명]\n\n카카오에 입사한 신입 개발자 네오는 &quot;카카오계정개발팀&quot;에 배치되어, 카카오 서비스에 가입하는 유저들의 아이디를 생성하는 업무를 담당하게 되었습니다. “네오”에게 주어진 첫 업무는 새로 가입하는 유저들이 카카오 아이디 규칙에 맞지 않는 아이디를 입력했을 때, 입력된 아이디와 유사하면서 규칙에 맞는 아이디를 추천해주는 프로그램을 개발하는 것입니다.\n다음은 카카오 아이디의 규칙입니다.\n\n- 아이디의 길이는 3자 이상 15자 이하여야 합니다.\n- 아이디는 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.) 문자만 사용할 수 있습니다.\n- 단, 마침표(.)는 처음과 끝에 사용할 수 없으며 또한 연속으로 사용할 수 없습니다.\n\n\n“네오”는 다음과 같이 7단계의 순차적인 처리 과정을 통해 신규 유저가 입력한 아이디가 카카오 아이디 규칙에 맞는 지 검사하고 규칙에 맞지 않은 경우 규칙에 맞는 새로운 아이디를 추천해 주려고 합니다.\n신규 유저가 입력한 아이디가 new_id 라고 한다면,\n\n1단계 new_id의 모든 대문자를 대응되는 소문자로 치환합니다.\n2단계 new_id에서 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.)를 제외한 모든 문자를 제거합니다.\n3단계 new_id에서 마침표(.)가 2번 이상 연속된 부분을 하나의 마침표(.)로 치환합니다.\n4단계 new_id에서 마침표(.)가 처음이나 끝에 위치한다면 제거합니다.\n5단계 new_id가 빈 문자열이라면, new_id에 &quot;a&quot;를 대입합니다.\n6단계 new_id의 길이가 16자 이상이면, new_id의 첫 15개의 문자를 제외한 나머지 문자들을 모두 제거합니다.\n만약 제거 후 마침표(.)가 new_id의 끝에 위치한다면 끝에 위치한 마침표(.) 문자를 제거합니다.\n7단계 new_id의 길이가 2자 이하라면, new_id의 마지막 문자를 new_id의 길이가 3이 될 때까지 반복해서 끝에 붙입니다.\n\n\n[문제]\n\n신규 유저가 입력한 아이디를 나타내는 new_id가 매개변수로 주어질 때, “네오”가 설계한 7단계의 처리 과정을 거친 후의 추천 아이디를 return 하도록 solution 함수를 완성해 주세요.\n\n[제한사항]\n\n\n  new_id는 길이 1 이상 1,000 이하인 문자열입니다.\n  new_id는 알파벳 대문자, 알파벳 소문자, 숫자, 특수문자로 구성되어 있습니다.\n  new_id에 나타날 수 있는 특수문자는 -_.~!@#$%^&amp;amp;*()=+[{]}:?,&amp;lt;&amp;gt;/로 한정됩니다.\n\n\n[입출력 예]\n\n\n  \n    \n      no\n      new_id\n      result\n    \n  \n  \n    \n      예1\n      “…!@BaT#*..y.abcdefghijklm”\n      “bat.y.abcdefghi”\n    \n    \n      예2\n      “z-+.^.”\n      “z–”\n    \n    \n      예3\n      ”=.=”\n      “aaa”\n    \n    \n      예4\n      “123_.def”\n      “123_.def”\n    \n    \n      예5\n      “abcdefghijklmn.p”\n      “abcdefghijklmn”\n    \n  \n\n\n\n\nSolution\n\n[문제 이해]\n\n내가 이해한 내용은 다음과 같았다.\n\n  \n    주어진 조건에 따라 구현하기\n    정규식 활용하기\n  \n\n\n이해한 내용을 바탕으로 코드 작성을 해보았다.\n\n[코드]\n\nimport re\n\ndef solution(new_id):\n    # 모두 소문자화\n    st = new_id.lower()\n    # 알파벳과 숫자, -, _, . 을 제외한 문자 제거\n    st = re.sub(&#39;[^a-z0-9\\-_.]&#39;, &#39;&#39;, st)\n    # .이 1개 이상인 경우 . 1개로 치환\n    st = re.sub(&#39;\\.+&#39;, &#39;.&#39;, st)\n    # 시작 or 끝의 . 제거\n    st = re.sub(&#39;^[.]|[.]$&#39;, &#39;&#39;, st)\n    # 문자열의 길이가 0인 경우 a 대입 or 15번째까지 인덱싱\n    st = &#39;a&#39; if len(st) == 0 else st[:15]\n    # 변경된 문자열의 시작 or 끝의 . 제거\n    st = re.sub(&#39;^[.]|[.]$&#39;, &#39;&#39;, st)\n    # 문자열의 최소길이 3자를 맞추기 위한 조건\n    answer = st if len(st) &amp;gt; 2 else st + &quot;&quot;.join([st[-1] for i in range(3-len(st))])\n    return answer\n\n"
} ,
  
  {
    "title"    : "Dark Mode",
    "category" : "",
    "tags"     : " Katex, Markdown",
    "url"      : "/2020/11/12/dark-mode.html",
    "date"     : "November 12, 2020",
    "excerpt"  : "More colors with less light.\n\nClick the half-moon most top-right button to turn the lights on/off.\n\nHeaders\nLevel 2\nLevel 3\nLevel 4\nLevel 5\nLevel 6\n\nHeaders with links\nLevel 2\nLevel 3\nLevel 4\nLevel 5\nLevel 6\n\nCode highlight\nMode specific code high...",
  "content"  : "More colors with less light.\n\nClick the half-moon most top-right button to turn the lights on/off.\n\nHeaders\nLevel 2\nLevel 3\nLevel 4\nLevel 5\nLevel 6\n\nHeaders with links\nLevel 2\nLevel 3\nLevel 4\nLevel 5\nLevel 6\n\nCode highlight\nMode specific code highlighting themes. Kramdown which is responsible for the color highlighting may be more limited than your IDE.\n\n#!/usr/bin/env python\n&quot;&quot;&quot;\nTest file for syntax\n&quot;&quot;&quot;\n# TODO: Use dark mode\nfrom sys import os\n\ndef foo(bar): \n    try:\n        print(bar)\n    except NameError:\n        print(&quot;Variable bar is not defined&quot;)\n\n\nclass Bar(object): \n    def __init__(self):\n        foo(1)\n        self.octal = &#39;\\04&#39;\n        self.text = &quot;&quot;&quot;Example \\t\\n&quot;&quot;&quot;\n    \n    def __exit__(self, *args):\n        print(&#39;exit\\u1111\\xFF&#39;)\n        pass\n    \n    @staticmethod\n    def example():\n        assert (1.0 and 2L) or True\n        return { &quot;example&quot;: [(1,), (r&#39;raw&#39;, u&#39;unicode&#39;)]}\n\n\nTables\n\n\n  \n    \n      hex\n      dec\n      oct\n    \n  \n  \n    \n      0\n      0\n      0\n    \n    \n      5\n      5\n      5\n    \n    \n      A\n      10\n      12\n    \n    \n      F\n      16\n      20\n    \n    \n      F5\n      21\n      25\n    \n  \n\n\nKaTeX\n\nSome KaTeX diagrams to check in dark mode:\n\n\\[\\begin{CD}\nA @&amp;gt;a&amp;gt;&amp;gt; B \\\\\n@VbVV @AAcA \\\\\nC @= D\n\\end{CD}\\]\n\n\\[\\utilde{AB}\\]\n"
} ,
  
  {
    "title"    : "Sample post",
    "category" : "",
    "tags"     : " A Tag, Katex",
    "url"      : "/2020/11/11/sample-post.html",
    "date"     : "November 11, 2020",
    "excerpt"  : "Consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit. Donec et mollis dolor. \nPraesent et diam eget libero egestas mattis sit amet vitae augue. Nam tinci...",
  "content"  : "Consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit. Donec et mollis dolor. \nPraesent et diam eget libero egestas mattis sit amet vitae augue. Nam tincidunt congue enim, ut porta lorem lacinia consectetur. \n\nDonec ut libero sed arcu vehicula ultricies a non tortor. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ut gravida lorem.\n\n\n  Consectetur adipiscing elit\n  Donec a diam lectus\n  Sed sit amet ipsum mauris\n\n\nUt turpis felis, pulvinar a semper sed, adipiscing id dolor. Pellentesque auctor nisi id magna consequat sagittis. Curabitur dapibus enim sit amet elit pharetra tincidunt feugiat nisl imperdiet. Ut convallis libero in urna ultrices accumsan. Donec sed odio eros. Donec viverra mi quis quam pulvinar at malesuada arcu rhoncus. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. In rutrum accumsan ultricies. Mauris vitae nisi at sem facilisis semper ac in est.\n\nNunc diam velit, adipiscing ut tristique vitae, sagittis vel odio. Maecenas convallis ullamcorper ultricies. Curabitur ornare, ligula semper consectetur sagittis, nisi diam iaculis velit, id fringilla sem nunc vel mi. Nam dictum, odio nec pretium volutpat, arcu ante placerat erat, non tristique elit urna et turpis. Quisque mi metus, ornare sit amet fermentum et, tincidunt et orci. Fusce eget orci a orci congue vestibulum.\n\n\n    \n    \n        \n    \n    \n\n\nUt dolor diam, elementum et vestibulum eu, porttitor vel elit. Curabitur venenatis pulvinar tellus gravida ornare. Sed et erat faucibus nunc euismod ultricies ut id justo. Nullam cursus suscipit nisi, et ultrices justo sodales nec. Fusce venenatis facilisis lectus ac semper. Aliquam at massa ipsum. Quisque bibendum purus convallis nulla ultrices ultricies. Nullam aliquam, mi eu aliquam tincidunt, purus velit laoreet tortor, viverra pretium nisi quam vitae mi. Fusce vel volutpat elit. Nam sagittis nisi dui.\n\n\n  Suspendisse lectus leo, consectetur in tempor sit amet, placerat quis neque\n\n\nEtiam luctus porttitor lorem, sed suscipit est rutrum non. Curabitur lobortis nisl a enim congue semper. Aenean commodo ultrices imperdiet. Vestibulum ut justo vel sapien venenatis tincidunt.\n\n\\[\\Theta \\ne \\Gamma\\]\n\nPhasellus eget dolor sit amet ipsum dapibus condimentum vitae quis lectus. Aliquam ut massa in turpis dapibus convallis. Praesent elit lacus, vestibulum at malesuada et, ornare et est. Ut augue nunc, sodales ut euismod non, adipiscing vitae orci1. Mauris ut placerat justo. Mauris in ultricies enim. Quisque nec est eleifend nulla ultrices egestas quis ut quam. Donec sollicitudin lectus a mauris pulvinar id aliquam urna cursus. Cras quis ligula sem, vel elementum mi. Phasellus non ullamcorper urna.\n\n\n  \n    \n\n      John Smith, A Title About Citations &amp;#8617;\n    \n  \n\n"
} ,
  
  {
    "title"    : "Color Post",
    "category" : "",
    "tags"     : " Test, Color",
    "url"      : "/2020/11/10/color-post.html",
    "date"     : "November 10, 2020",
    "excerpt"  : "What a colorful post!\n\nThis is an idea that came from xukimseven/HardCandy-Jekyll \nlooking at this cheerful and colorful theme, I wanted to enable something similar for Type-on-Strap.\n\nYou can go fork and star HardCandy-Jekyll too! 😉\n\n\n\nHow does i...",
  "content"  : "What a colorful post!\n\nThis is an idea that came from xukimseven/HardCandy-Jekyll \nlooking at this cheerful and colorful theme, I wanted to enable something similar for Type-on-Strap.\n\nYou can go fork and star HardCandy-Jekyll too! 😉\n\n\n\nHow does it work?\n\nBasically you need to add just one thing, the color:\n\n---\nlayout: post\ntitle: Color Post\ncolor: brown\n---\n\n\nIt can either be a html color like brown (which look like red to me). Or with the rgb:\n\n---\nlayout: post\ntitle: Color Post\ncolor: rgb(165,42,42)\n---\n\n\nThe background used is lineart.png from xukimseven you can edit it in the config file. \nIf you want another one, put it in /assets/img as well.\n\n\n  ⚠️ It’s a bit hacking the css in the post.html\n\n"
} ,
  
  {
    "title"    : "Bootstrap",
    "category" : "",
    "tags"     : " Test",
    "url"      : "/2020/11/09/Use-Bootstrap.html",
    "date"     : "November 9, 2020",
    "excerpt"  : "This theme is compatible with Bootstrap if you choose to use it in your pages or posts.\nHere is a little demo with a code snippet, look at the source to see how the HTML and markdown get tangled.\n\nUse bootstrap\n\nAdd some custom Bootstrap in the cu...",
  "content"  : "This theme is compatible with Bootstrap if you choose to use it in your pages or posts.\nHere is a little demo with a code snippet, look at the source to see how the HTML and markdown get tangled.\n\nUse bootstrap\n\nAdd some custom Bootstrap in the custom layout!\n\n\n\nSnippet example\n\nIf you are new to Bootstrap you can  always check the documentation.\nHere is an example from startbootstrap.com.\n\n\n\n\n  \n    \n      \n        \n        \n          \n            Project One\n          \n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam viverra euismod odio, gravida pellentesque urna varius vitae.\n        \n      \n    \n    \n      \n        \n        \n          \n            Project Two\n          \n          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Fugit aliquam aperiam nulla perferendis dolor nobis numquam, rem expedita, aliquid optio, alias illum eaque. Non magni, voluptates quae, necessitatibus unde temporibus.\n        \n      \n    \n    \n      \n        \n        \n          \n            Project Three\n          \n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam viverra euismod odio, gravida pellentesque urna varius vitae.\n        \n      \n    \n    \n      \n        \n        \n          \n            Project Four\n          \n          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Fugit aliquam aperiam nulla perferendis dolor nobis numquam, rem expedita, aliquid optio, alias illum eaque. Non magni, voluptates quae, necessitatibus unde temporibus.\n        \n      \n    \n    \n      \n        \n        \n          \n            Project Five\n          \n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam viverra euismod odio, gravida pellentesque urna varius vitae.\n        \n      \n    \n    \n      \n        \n        \n          \n            Project Six\n          \n          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Fugit aliquam aperiam nulla perferendis dolor nobis numquam, rem expedita, aliquid optio, alias illum eaque. Non magni, voluptates quae, necessitatibus unde temporibus.\n        \n      \n    \n  \n  \n\n\n\n\nMix it with Markdown\n\nAll the above was custom HTML with Bootstrap.\nYou can also mix it up with some markdown.\n\nYou can use the bootstrap’s build in javascript API to control your event.\nHere is a code snippet for the documentation:\n\n$(&#39;#myModal&#39;).on(&#39;show.bs.modal&#39;, function (e) {\n    if (!data) return e.preventDefault() // stops modal from being shown\n})\n\n\nThat’s just for demo though, you would need to properly integrate your javascript in your page.\nUsually you would put any custom javascript script in the assets folder under js and reference it in your page from there.\n\nSo try it out using the bootstrap: true flag! 😉\n"
} ,
  
  {
    "title"    : "Feature images",
    "category" : "",
    "tags"     : " Test, Image",
    "url"      : "/2020/11/08/feature-images.html",
    "date"     : "November 8, 2020",
    "excerpt"  : "Hopefully you will find enough information about how to set images in your blog here.\nThis is an example of a post which includes a feature image specified in the front matter of the post. \nThe feature image spans the full-width of the page, and i...",
  "content"  : "Hopefully you will find enough information about how to set images in your blog here.\nThis is an example of a post which includes a feature image specified in the front matter of the post. \nThe feature image spans the full-width of the page, and is shown with the title on permalink pages:\n\nfeature-img: &quot;assets/img/feature-img/desk-messy.jpeg&quot;\nthumbnail: &quot;assets/img/thumbnails/feature-img/desk-messy.jpeg&quot; \n\n\nYou can also use a thumbnail, a smaller version of the same image to improve loading of the page.\nThe thumbnail will also be used when you share your article on other platform (linkedin, whatsapp, facebook, …).\n\n\n  \n    And now it is working\n  \n\n\nYou can also add images aligned in your post using the aligner include.\nMake sure to separate all of the image path from in a string separated with ,.\nIt by default look into assets/img/ so give the path from there, example:\n\n{% include aligner.html images=&quot;pexels/book-glass.jpeg,triangle.png&quot; %}\n\n\n    \n    \n        \n    \n    \n    \n        \n    \n    \n\n\nHere you have two images side by side, but you can set more and set the amount per columns \n(by specifying the number of columns or let it be automatic using &quot;auto&quot;):\n\n{% include aligner.html images=&quot;portfolio/cabin.png,portfolio/cake.png,portfolio/circus.png&quot; column=3 %}\n\n\n    \n    \n        \n    \n    \n    \n        \n    \n    \n    \n        \n    \n    \n\n\nit also works with only one images, it is made to display it smaller than normally.\nHowever you can just use the Markdown way of doing it to get the image normal sized and centered.\n\n# Markdown way (bigger)\n![Travel]({{ &quot;/assets/img/pexels/computer.jpeg&quot; | relative_url}})\n# Aligner with only One (50% of width)\n{% include aligner.html images=&quot;pexels/computer.jpeg&quot; %}\n\n\n    \n    \n        \n    \n    \n\n\n"
} ,
  
  {
    "title"    : "Markdown and HTML",
    "category" : "",
    "tags"     : " Katex, Markdown",
    "url"      : "/2020/11/07/markdown-and-html.html",
    "date"     : "November 7, 2020",
    "excerpt"  : "Jekyll supports the use of Markdown with inline HTML tags which makes it easier to quickly write posts with Jekyll, without having to worry too much about text formatting. A sample of the formatting follows.\n\nTitle\n\nSub title\n\nTables have also bee...",
  "content"  : "Jekyll supports the use of Markdown with inline HTML tags which makes it easier to quickly write posts with Jekyll, without having to worry too much about text formatting. A sample of the formatting follows.\n\nTitle\n\nSub title\n\nTables have also been extended from Markdown:\n\n\n  \n    \n      First Header\n      Second Header\n    \n  \n  \n    \n      Content Cell\n      Content Cell\n    \n    \n      Content Cell\n      Content Cell\n    \n  \n\n\nHere’s an example of an image, which is included using Markdown:\n\n\n\nThis is another example of list:\n\n\n  list of things\n    \n      Sub list\n      of Other things\n      with numbers\n    \n  \n  And many more\n    \n      Sub sub list\n        \n          can go on …\n            \n              and on …\n                \n                  and on !\n                \n              \n            \n          \n        \n      \n      That’s it.\n    \n  \n\n\nOther subtitle\n\nHighlighting for code in Jekyll is done using Base16 or Rouge. This theme makes use of Rouge by default.\n\n// count to ten\nfor (var i = 1; i &amp;lt;= 10; i++) {\n    console.log(i);\n}\n\n// count to twenty\nvar j = 0;\nwhile (j &amp;lt; 20) {\n    j++;\n    console.log(j);\n}\n\nMath\n\nType on Strap uses KaTeX to display maths. Equations such as \\(S_n = a \\times \\frac{1-r^n}{1-r}\\) can be displayed inline.\n\nAlternatively, they can be shown on a new line:\n\n\\[f(x) = \\int \\frac{2x^2+4x+6}{x-2}\\]\n\n"
} ,
  
  {
    "title"    : "What&#39;s your title",
    "category" : "",
    "tags"     : " Test, Image",
    "url"      : "/2020/11/06/whats-your-title.html",
    "date"     : "November 6, 2020",
    "excerpt"  : "This is an example of a post which includes a feature image that has a\ntext, where you don’t want to redisplay the title.\nMind your image size in order for the text to be displayed where you want it to.\nThe only limit is your imagination.\n\nHere is...",
  "content"  : "This is an example of a post which includes a feature image that has a\ntext, where you don’t want to redisplay the title.\nMind your image size in order for the text to be displayed where you want it to.\nThe only limit is your imagination.\n\nHere is how the yaml looks inside the post:\n\ntitle: What&#39;s your title\nhide_title: true\nfeature-img: assets/img/feature-img/story.jpeg\nauthor: mhagnumdw\ntags: [Test, Lorem]\n\n\nYou may wonder, why is there a title when you are not actually displaying it. \nWell that’s due to some jekyll limitation:\n\n\n  You can’t set the title to the empty string\n\n\nThe title is used elsewhere than inside the post, for example in the blog page that list this post.\nAn empty title would break those pages and possibly prevents jekyll to render your blog.\n"
} ,
  
  {
    "title"    : "The Real Lorem Ipsum",
    "category" : "",
    "tags"     : " Image, Color",
    "url"      : "/2020/11/05/lorem-ipsum.html",
    "date"     : "November 5, 2020",
    "excerpt"  : "Lorem Ipsum\n\nfrom “de Finibus Bonorum et Malorum” written by Cicero in 45 BC.\n \nFind out more on lipsum.com. And if you like colors, check out the http color trends from w3schools.\n\nThe standard Lorem Ipsum passage (since 1500s)\n\n“Lorem ipsum dolo...",
  "content"  : "Lorem Ipsum\n\nfrom “de Finibus Bonorum et Malorum” written by Cicero in 45 BC.\n \nFind out more on lipsum.com. And if you like colors, check out the http color trends from w3schools.\n\nThe standard Lorem Ipsum passage (since 1500s)\n\n“Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.”\n\nSection 1.10.32\n\nLatin\n“Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?”\n\nTranslation by H. Rackham (1914)\n“But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure?”\n\nSection 1.10.33\n\nLatin\n\n“At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.”\n\nTranslation by H. Rackham (1914)\n\n“On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded by desire, that they cannot foresee the pain and trouble that are bound to ensue; and equal blame belongs to those who fail in their duty through weakness of will, which is the same as saying through shrinking from toil and pain. These cases are perfectly simple and easy to distinguish. In a free hour, when our power of choice is untrammelled and when nothing prevents our being able to do what we like best, every pleasure is to be welcomed and every pain avoided. But in certain circumstances and owing to the claims of duty or the obligations of business it will frequently occur that pleasures have to be repudiated and annoyances accepted. The wise man therefore always holds in these matters to this principle of selection: he rejects pleasures to secure other greater pleasures, or else he endures pains to avoid worse pains.”\n\n"
} ,
  
  {
    "title"    : "Markup: Syntax Highlighting",
    "category" : "",
    "tags"     : " Highlight, Markdown",
    "url"      : "/2020/11/04/Markup-Syntax-Highlighting.html",
    "date"     : "November 4, 2020",
    "excerpt"  : "Syntax highlighting1 is a feature that displays source code. \nThis feature facilitates writing in a structured language such as a programming language or a markup language as it makes import things visually distinct.\n\nGFM Code Blocks\n\nGitHub Flavo...",
  "content"  : "Syntax highlighting1 is a feature that displays source code. \nThis feature facilitates writing in a structured language such as a programming language or a markup language as it makes import things visually distinct.\n\nGFM Code Blocks\n\nGitHub Flavored Markdown fenced code blocks are supported. To modify styling and highlight colors edit /_sass/syntax.scss.\n\n#container {\n  float: left;\n  margin: 0 -240px 0 0;\n  width: 100%;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n.highlight {\n  margin: 0;\n  padding: 1em;\n  font-family: $monospace;\n  font-size: $type-size-7;\n  line-height: 1.8;\n}\n\n\n&amp;lt;nav class=&quot;pagination&quot; role=&quot;navigation&quot;&amp;gt;\n  {% if page.previous %}\n    &amp;lt;a href=&quot;{{ site.url }}{{ page.previous.url }}&quot; class=&quot;btn&quot; title=&quot;{{ page.previous.title }}&quot;&amp;gt;Previous article&amp;lt;/a&amp;gt;\n  {% endif %}\n  {% if page.next %}\n    &amp;lt;a href=&quot;{{ site.url }}{{ page.next.url }}&quot; class=&quot;btn&quot; title=&quot;{{ page.next.title }}&quot;&amp;gt;Next article&amp;lt;/a&amp;gt;\n  {% endif %}\n&amp;lt;/nav&amp;gt;&amp;lt;!-- /.pagination --&amp;gt;\n\n\nmodule Jekyll\n  class TagIndex &amp;lt; Page\n    def initialize(site, base, dir, tag)\n      @site = site\n      @base = base\n      @dir = dir\n      @name = &#39;index.html&#39;\n      self.process(@name)\n      self.read_yaml(File.join(base, &#39;_layouts&#39;), &#39;tag_index.html&#39;)\n      self.data[&#39;tag&#39;] = tag\n      tag_title_prefix = site.config[&#39;tag_title_prefix&#39;] || &#39;Tagged: &#39;\n      tag_title_suffix = site.config[&#39;tag_title_suffix&#39;] || &#39;&amp;amp;#8211;&#39;\n      self.data[&#39;title&#39;] = &quot;#{tag_title_prefix}#{tag}&quot;\n      self.data[&#39;description&#39;] = &quot;An archive of posts tagged #{tag}.&quot;\n    end\n  end\nend\n\n\nCode Blocks in Lists\n\nIndentation matters. Be sure the indent of the code block aligns with the first non-space character after the list item marker (e.g., 1.). Usually this will mean indenting 3 spaces instead of 4.\n\n\n  Do step 1.\n  \n    Now do this:\n\n    def print_hi(name)\n  puts &quot;Hi, #{name}&quot;\nend\nprint_hi(&#39;Tom&#39;)\n#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.\n    \n  \n  Now you can do this.\n\n\nGitHub Gist Embed\n\nAn example of a Gist embed below:\n\n\n\nYou can use defer=true so that the loading of the gist doesn’t prevent the loading of the page.\n\n   &amp;lt;script defer=true \n           src=&quot;https://gist.github.com/sylhare/dad7ed1ef3d13614c77c4ebadf8a11c3.js&quot;&amp;gt;\n   &amp;lt;/script&amp;gt;\n\n\n  \n    \n\n      Michael’s Rose, Minimal Mistakes &amp;#8617;\n    \n  \n\n"
} ,
  
  {
    "title"    : "Generate a table of content",
    "category" : "",
    "tags"     : " Kramdown, Customization",
    "url"      : "/2020/11/03/Generate-a-table-of-content.html",
    "date"     : "November 3, 2020",
    "excerpt"  : "Using Kramdown GFM \n\n\n\n  Using Kramdown GFM     \n      Basic Usage\n    \n  \n  Using toc.js    \n      Customize with toc.js        \n          Use with this jekyll template\n        \n      \n      Basic Usage\n      How it would look like\n    \n  \n\n\nBasi...",
  "content"  : "Using Kramdown GFM \n\n\n\n  Using Kramdown GFM     \n      Basic Usage\n    \n  \n  Using toc.js    \n      Customize with toc.js        \n          Use with this jekyll template\n        \n      \n      Basic Usage\n      How it would look like\n    \n  \n\n\nBasic Usage\n\nYou need to put this at the beginning of the page where you want the table of content to be displayed\n\n* TOC\n{:toc}\n\n\nIt will then render the markdown and html titles (lines that begins with # or using the &amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt; tages)\n\nUsing toc.js\n\nDemo display of jekyll-table-of-contents by ghiculescu.\n\n\n\n\nCustomize with toc.js\n\ntoc.js stands for table of content, it is a js plugin that generates automatically a table of content of a post.\n\nUse with this jekyll template\n\nIf you want to customize the theme it is up to you, you can add the toc.js file into the asset &amp;gt; js and add it into the page.html layout with:\n\n&amp;lt;script src=&quot;/assets/js/toc.js&quot; &amp;gt;&amp;lt;/script&amp;gt;\n\nThen you can use it as it is said on the repository.\n\nBasic Usage\n\nThe script requires jQuery. First, reference toc.js in templates where you would like to add the table of content. Then, create an HTML element wherever you want your table of contents to appear:\n\n&amp;lt;div id=&quot;toc&quot;&amp;gt;&amp;lt;/div&amp;gt;\n\n\nThen you put your post with titles and all like:\n\n## Title\n## Mid title 1\nThis is text on page one\n## Mid title 2\nThis is text for page two\n### Sub title 2.a\nSome more text\n\n\nThen at the end of your post, you call the .toc() function using:\n\n&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;\n$(document).ready(function() {\n    $(&#39;#toc&#39;).toc();\n});\n&amp;lt;/script&amp;gt;\n\n\nHow it would look like\n\nSo you can get a feel of it.\n\n\n\n\n\n\n\n\n"
} ,
  
  {
    "title"    : "Tech Stuff example",
    "category" : "",
    "tags"     : " Mermaid, Highlight, Markdown",
    "url"      : "/2020/11/02/Tech-stuff-example.html",
    "date"     : "November 2, 2020",
    "excerpt"  : "Because if you put some code in your blog, you would at least make it:\n\n\n  Searchable\n  Good-looking\n\n\nSearch on code\n\nSearch should be working even for complicated escape symbols.\n\nsed -i &#39;s/\\&quot;hostname\\&quot;\\:.*$/\\&quot;hostname\\&quot;\\: \\&quot;&#39;$IPADDR&#39;\\&quot;\\,/g&#39; ope...",
  "content"  : "Because if you put some code in your blog, you would at least make it:\n\n\n  Searchable\n  Good-looking\n\n\nSearch on code\n\nSearch should be working even for complicated escape symbols.\n\nsed -i &#39;s/\\&quot;hostname\\&quot;\\:.*$/\\&quot;hostname\\&quot;\\: \\&quot;&#39;$IPADDR&#39;\\&quot;\\,/g&#39; open-falcon/agent/config/cfg.json\n\n\nOr try searching for partial of a command, like this article should be returned when looking for “find grep”\n\nfind /etc -type f -exec cat &#39;{}&#39; \\; | tr -c &#39;.[:digit:]&#39; &#39;\\n&#39; | grep &#39;^[^.][^.]*\\.[^.][^.]*\\.[^.][^.]*\\.[^.][^.]*$&#39;\n\n\nCode highlighting examples\n\nBecause you might put code in your blog post, and you want to make sure it will look good in here.\nPlus that the search function will still be working!\n\nJava\n\njava example\n\nimport java.util.*;\n\n@Example\npublic class Demo {\n  private static final String CONSTANT = &quot;String&quot;;\n  private Object o;\n  /**\n   * Creates a new demo.\n   * @param o The object to demonstrate.\n   */\n  public Demo(Object o) {\n    this.o = o;\n    String s = CONSTANT + &quot;Other example of text&quot;;\n    int i = 123 - 33 % 11;\n  }\n  public static void main(String[] args) {\n    Demo demo = new Demo();\n    System.out.println(demo.o.toString())\n  }\n}\n\n\nHTML\n\nhtml example\n\n&amp;lt;!DOCTYPE html&amp;gt;\n&amp;lt;html lang=&quot;en&quot;&amp;gt;\n  &amp;lt;body&amp;gt;\n    &amp;lt;div class=&quot;content&quot;&amp;gt;\n        This is an example\n    &amp;lt;/div&amp;gt;\n  &amp;lt;/body&amp;gt;\n&amp;lt;/html&amp;gt;\n\n\nJavascript\n\n/**\n * Does a thing\n */\nfunction helloWorld(param1, param2) {\n  var something = 0;\n\n  // Do something\n  if (2.0 % 2 == something) {\n    console.log(&#39;Hello, world!&#39;);\n  } else {\n    return null;\n  }\n\n  // @TODO comment\n}\n\n\nPython\n\nimport os\n\ndef some_function(param_one=&quot;&quot;, param_two=0):\n    r&#39;&#39;&#39;A docstring&#39;&#39;&#39;\n    if param_one &amp;gt; param_two: # interesting\n        print(&quot;Greater&quot;)\n    return (param_two - param_one + 1 + 0b10) or None\n\nclass SomeClass:\n    &quot;&quot;&quot; dunno what I am doing &quot;&quot;&quot;\n    \n    def __init__(self):\n        pass\n\n\nYAML\n\nYou can also render some yaml, like this _config.yml:\n\n\n# Welcome to Jekyll!\n#\n# This config file is meant for settings that affect your whole blog, values\n# which you are expected to set up once and rarely edit after that. If you find\n# yourself editing this file very often, consider using Jekyll&#39;s data files\n# feature for the data you need to update frequently.\n#\n# This file, &quot;_config.yml&quot; is *NOT* reloaded automatically when you use\n# &#39;bundle exec jekyll serve&#39;. If you change this file, please restart the server process.\n\n# Site settings\n# These are used to personalize your new site. If you look in the HTML files,\n# you will see them accessed via Jeon Repository, , and so on.\n# You can create any custom variable you would like, and they will be accessible\n# in the templates via .\n\n# SITE CONFIGURATION\nbaseurl: &quot;/Type-on-Strap&quot;\nurl: &quot;https://sylhare.github.io&quot;\n\n# THEME-SPECIFIC CONFIGURATION\ntitle: Type on Strap                                    # site&#39;s title\ndescription: &quot;A website with blog posts and pages&quot;      # used by search engines\navatar: assets/img/triangle.png                         # Empty for no avatar in navbar\nfavicon: assets/favicon.ico                             # Icon displayed in the tab\n\nremote_theme: sylhare/Type-on-Strap                     # If using as a remote_theme in github\n\n\nMermaid\n\nDiagrams with mermaid.\n\nHere is a simple example using:\n\n&amp;lt;div class=&quot;mermaid&quot;&amp;gt;\nsequenceDiagram\n    Alice-&amp;gt;&amp;gt;John: Hello John, how are you?\n    John--&amp;gt;&amp;gt;Alice: Great!\n&amp;lt;/div&amp;gt;\n\n\nThat will be rendered into this:\n\n\n    \n    \n        \n    \n    \n\n\nYou can also go with more complex features and diagrams from the documentation:\n\n\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice-&amp;gt;&amp;gt;John: Hello John, how are you?\n    loop Healthcheck\n        John-&amp;gt;&amp;gt;John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts prevail!\n    John--&amp;gt;&amp;gt;Alice: Great!\n    John-&amp;gt;&amp;gt;Bob: How about you?\n    Bob--&amp;gt;&amp;gt;John: Jolly good!\n\n"
} ,
  
  {
    "title"    : "Blogging with title ",
    "category" : "",
    "tags"     : " Test, Image",
    "url"      : "/2020/11/01/blogging-with-title.html",
    "date"     : "November 1, 2020",
    "excerpt"  : "I am a BIG title\n\nThis is a very tiny tiny post with less than 250 letters.\n\n",
  "content"  : "I am a BIG title\n\nThis is a very tiny tiny post with less than 250 letters.\n\n"
} 
  
  ,
  
  {
  
  "title"    : "Ninja",
  "category" : "",
  "tags"     : " Lorem",
  "url"      : "/portfolio/ninja",
  "date"     : "April 8, 2014",
  "excerpt"  : "\n\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, \neaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem ...",
  "content"  : "\n\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, \neaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, \nsed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. \nNeque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, \nadipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. \nUt enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? \nQuis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, \nvel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\n\n"
  
} ,
  
  {
  
  "title"    : "Creative",
  "category" : "",
  "tags"     : " Ipsum",
  "url"      : "/portfolio/safe",
  "date"     : "August 16, 2014",
  "excerpt"  : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, \ntotam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem qu...",
  "content"  : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, \ntotam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, \nsed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. \nNeque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, \nsed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. \nUt enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? \nQuis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, \nvel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\n\nUse this area of the page to describe your project. \nThe icon above is part of a free icon set by Flat Icons.\n"
  
} ,
  
  {
  
  "title"    : "Circus",
  "category" : "",
  "tags"     : " Ipsum",
  "url"      : "/portfolio/circus",
  "date"     : "September 1, 2014",
  "excerpt"  : "\n\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, \neaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem ...",
  "content"  : "\n\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, \neaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, \nsed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. \nNeque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, \nadipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. \nUt enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? \nQuis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, \nvel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\n\n"
  
} ,
  
  {
  
  "title"    : "Tower of Hanoi",
  "category" : "",
  "tags"     : " ",
  "url"      : "/portfolio/hanoi",
  "date"     : "September 1, 2014",
  "excerpt"  : "\n\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, \neaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem ...",
  "content"  : "\n\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, \neaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, \nsed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. \nNeque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, \nadipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. \nUt enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? \nQuis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, \nvel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\n\n"
  
} ,
  
  {
  
  "title"    : "Tic tac toe",
  "category" : "",
  "tags"     : " ",
  "url"      : "/portfolio/tictactoe",
  "date"     : "September 1, 2014",
  "excerpt"  : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, \ntotam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem qu...",
  "content"  : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, \ntotam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, \nsed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. \nNeque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, \nsed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. \nUt enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? \nQuis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, \nvel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\n\nUse this area of the page to describe your project. \nThe icon above is part of a free icon set by Flat Icons.\n\n"
  
} ,
  
  {
  
  "title"    : "Cake",
  "category" : "",
  "tags"     : " Lorem, Ipsum",
  "url"      : "/portfolio/cake",
  "date"     : "September 27, 2015",
  "excerpt"  : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, \ntotam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem qu...",
  "content"  : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, \ntotam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, \nsed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. \nNeque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, \nsed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. \nUt enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? \nQuis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, \nvel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\n\nUse this area of the page to describe your project. \nThe icon above is part of a free icon set by Flat Icons.\n"
  
} ,
  
  {
  
  "title"    : "Jekyll",
  "category" : "",
  "tags"     : " ",
  "url"      : "/portfolio/jekyllblog",
  "date"     : "May 26, 2017",
  "excerpt"  : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, \neaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem qu...",
  "content"  : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, \neaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, \nsed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. \nNeque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, \nadipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. \nUt enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? \nQuis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, \nvel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\n\n"
  
} ,
  
  {
  
  "title"    : "Lorem Ipsum",
  "category" : "",
  "tags"     : " ",
  "url"      : "/portfolio/submarine",
  "date"     : "September 3, 2017",
  "excerpt"  : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, \ntotam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem qu...",
  "content"  : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, \ntotam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, \nsed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. \nNeque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, \nsed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. \nUt enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? \nQuis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, \nvel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\n\nUse this area of the page to describe your project. \nThe icon above is part of a free icon set by Flat Icons.\n"
  
} ,
  
  {
  
  "title"    : "Github",
  "category" : "",
  "tags"     : " Lorem",
  "url"      : "/portfolio/gitlecture",
  "date"     : "October 20, 2017",
  "excerpt"  : "\n\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, \neaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem ...",
  "content"  : "\n\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, \neaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \nNemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, \nsed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. \nNeque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, \nadipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. \nUt enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? \nQuis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, \nvel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\n\n"
  
} 
  
]
